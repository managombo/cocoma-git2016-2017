breed [convois convoi]
convois-own[incoming-queue  
  avoidance-ticks ; nombre de ticks pour l'etape d'évitement
  finished? ; Is the goal reached ?
  leader?   ; car leading the convoi convoi
  to-protect? ; Should this car be protected at all cost ?
  genlongpath? ; Should the leader compute a new path (but not shortest) ?
  dead?
  speed maxdir ; maximal speed of a car, and max angle
  last-send-time ; communication historical time-stamp
  hit-points ; nb of hitpoints left before death
  ]

;################################################## INITIALISATION DU CONVOI ####################################################################################

to setup-convois
  if nb-cars > 0 [
    ; get the size of the base to deploy the car accordingly
    let base-min-pxcor min [pxcor] of (patches with [hangar? and pzcor = mapAlt])
    let base-max-pxcor max [pxcor] of (patches with [hangar? and pzcor = mapAlt])
    let base-min-pycor min [pycor] of (patches with [hangar? and pzcor = mapAlt])
    let base-max-pycor max [pycor] of (patches with [hangar? and pzcor = mapAlt])

    ; creation des voitures du convoi et cortege
    create-convois nb-cars
    ask convois
    [
      ; Init apparence NetLogo
      set shape "car"
      set color magenta

      ; Init des structures BDI
      set incoming-queue [] ; Do not change
      set beliefs []
      set intentions []
      ; Init vars convois
      set speed 0.05 * simu-speed
      set maxdir 10 * simu-speed
      set heading 0
      set roll 0
      set pitch 0
      set finished? false
      set leader? false
      set to-protect? false
      set genlongpath? false
      set dead? false
      set hit-points 10

      ; Visu
      set label who ; display the car names
    ]

    ; get the id of the first one
    let first-car min [who] of convois
    let last-car max [who] of convois

    ; configure the leader
    ask convoi first-car [
      set leader? true
      set color orange
      move-to patch base-max-pxcor base-max-pycor 1
    ]

    ; configure the last car as the critical one
    ask convoi last-car [
      set to-protect? true
      set color yellow
    ]

    ; deploying the other car
    if nb-cars > 1 [
      ; ask non leader cars
      ask turtle-set sort-on [who] convois with [who > first-car]
      [
        ; we create a link between them
        create-convoi-link-to turtle (who - 1)
        ;if who >= 4 and who mod 2 = 0 [ create-convoi-link-with turtle (who - 3) ]

        ; deploying
        ifelse (who - 1) mod 2 = 0 [ set xcor base-min-pxcor ] [ set xcor base-max-pxcor ] ; a gauche ou a droite selon le nombre (pair ou impair respectivement)
        set ycor base-max-pycor - (floor (who / 2) / (nb-cars / 2) * (base-max-pycor - base-min-pycor)) ; d'une rangee de plus en plus basse toutes les deux voitures
        set zcor solAlt
      ]

    ]
  ]
end




;#################################################### GESTION DU CONVOI  ##################################################################################
;-----------
;  CONVOIS
;-----------

; Procedure principale de gestion des convois
to convois-think

  if (count convois) > 0 [

    let first-car min [who] of convois

    ; Calcul du plan AStar pour chaque leader si necessaire
    
    
      foreach sort-on [who] turtle-set convois with [leader? and not finished? and not dead?] [
        let id ([who] of ?) - first-car
       
        ; Recalcule le chemin si nécessaire (par exemple au début de la simulation ou quand le convoi se sépare)
        ; Note: on est oblige de le faire en dehors du ask sinon on ne peut pas acceder a tous les patchs
        if empty? as-path or length as-path < (id + 1) or empty? (item id as-path) [ ; s'il n'y a pas encore de chemin du tout, ou pas de chemin pour cette voiture, on cree un plan AStar
                                                                                     ; Cree le plan AStar (attention a ca que le patch start soit au niveau ou il y a les obstacles, ici pzcor = mapAlt pour les obstacles)
          let start-patch min-one-of (patches with [pzcor = mapAlt and not obstacle?]) [distance ?] ; on s'assure de choisir comme patch de depart un patch libre sans obstacle, sinon quand on split un convoi il se peut qu'il soit sur un obstacle et qu'il ne puisse jamais generer de chemin
          let new-path plan-astar ([patch-at 0 0 (pzcor * -1)] of start-patch) (one-of patches with [objectif?]) ([genlongpath?] of ?)
          ; S'il n'y a pas de plan et qu'on a essayé de trouver un long chemin, on attend la prochaine iteration et on reessaie mais avec un plan court
          if empty? new-path and [genlongpath?] of ? [ ask ? [ set genlongpath? false ] ]
          ; S'il n'y a pas deja une entree pour cette voiture on la cree
          ifelse length as-path < (id + 1) [
            set as-path lput new-path as-path
          ]
          ; Sinon on remplace l'entree pour cette voiture par le nouveau plan
          [
            set as-path replace-item id as-path new-path
          ]
        ]
      
    ]
   

    ; Deplacement des leaders sur le chemin AStar
    
    ask convois with [leader? and not finished? and not dead?] [ ; Tant qu'on n'a pas atteint le but
      
      if hit-points = 0 
      [
        die
      ]
      
       ; Si ennemi non détecté
        ifelse not detect-enemy  and avoidance-ticks = 0 [       
      
          ;move-convoi-naive ; deplacement naif sans AStar
          
          ; Recupere le plan AStar
          let my-as-path item (who - first-car) as-path
          if not empty? my-as-path [
            ; Deplacement par waypoints: on se deplace jusqu'au prochain patch du chemin jusqu'à l'atteindre
            let next-patch first my-as-path
            let zz pzcor
            set next-patch [patch-at 0 0 (zz - pzcor)] of next-patch ; mise a niveau de pzcor au cas ou le chemin a ete calculé sur un autre plan
                                                                     ; Deplacement vers le prochain waypoint
            ifelse not [obstacle?] of next-patch[
              if next-patch != patch-here [move-convoi next-patch false false]
            ]
            [
              set as-path replace-item (who - first-car) as-path []
              ]
            ; Si on a atteint ce patch, on le supprime de la liste, et on va donc continuer vers le prochain patch du chemin
            if patch-here = next-patch [
              set my-as-path remove-item 0 my-as-path
              set as-path replace-item (who - first-car) as-path my-as-path
              if debug [ show (word "Waypoint atteint: " patch-here ", prochain: " next-patch ) ]
            ]
          ]
         
          ; Critere d'arret: on est a cote de l'objectif
          check-convoi-finished
         
       ]     
        ; Au cas où il ya détection d'ennemi, le leader change de direction
       [
         if avoidance-ticks = 0 [
           set avoidance-ticks 5
           turn-away
           set as-path replace-item (who - first-car) as-path []
           ]
         ifelse [obstacle?] of patch-ahead 1 [fd 1][turn-away]
         set avoidance-ticks avoidance-ticks - 1
                
      ]
      ;le leader donne les ordres aux drones
      give-missions
    ]

    ; Deplacement des voitures-cortege: elles ne font que suivre la voiture devant eux (avec laquelle elles sont liées)
    ask convois with [not leader? and not finished? and not dead?] [
      if hit-points = 0 [die]
      ifelse any? my-out-convoi-links [
        move-convoi ([patch-here] of one-of out-convoi-link-neighbors) true true
      ]
      ; S'il n'y a pas de lien devant, c'est probablement que la voiture est morte, donc on devient leader
      [
        set leader? true
        set genlongpath? true
        if not to-protect? [ set color orange ]
      ]
    ]
  ]
end


;############################################### MOUVEMENT CONVOI #######################################################################################

; Avancer une voiture
; Permet de faire avancer les voitures d'un convoi (cortege et leader)
; Maintien egalement une petite distance afin de ne pas "rentrer" dans la voiture de devant
to move-convoi [goal slowdown? cortege?]
  ;show (word "ici:" patch-here " goal:" goal)

  ; Calcule de l'angle avec la cible
  let headingFlag heading
  ifelse cortege?
  [ set headingFlag (towards goal) ] ; Si c'est un cortege, on veut qu'il suive toujours le leader par le chemin le plus court (surtout en play-mode ou le joueur n'est pas limite par le nowrap)
  [ set headingFlag (towards-nowrap goal) ]
  let dirCorrection subtract-headings headingFlag heading
  ; Arrondissement de l'angle (on ne veut pas faire de micro tournant)
  set dirCorrection precision dirCorrection 2
  ; Limite de l'angle, pour que ce soit plus realiste (la voiture ne peut pas faire un demi-tour sur place!)
  ifelse dirCorrection > maxdir [ ; limite a droite
    set dirCorrection maxdir
  ]
  [
    if dirCorrection < maxdir * -1 [ ; limite a gauche
      set dirCorrection maxdir * -1
    ]
  ]

  ; On tourne
  rt dirCorrection

  ; Limite de vitesse pour les voitures-cortege (pour pas qu'elles ne rentrent dans la voiture leader)
  let tmp-speed speed
  if slowdown? [
    if distance-nowrap goal < 1.1 [
      set tmp-speed tmp-speed / 20
    ]
    if distance-nowrap goal < 0.9 [
      set tmp-speed 0
    ]
  ]

  ; Deplacement!
  set pitch 0 ; make sure there's no pitch ever, else the car will disappear in the ground
  ask patch-at 0 0 0 [ set obstacle? false]
  fd tmp-speed ; Avance
  ask patch-at 0 0 0 [ set obstacle? true]
end


;############################################## DETECTION OBSTACLE ########################################################################################

to-report detect-obstacle
 if any? other patches in-cone 10 60 with [obstacle?] [report true]
; if any? other patches in-cone 10 90 [report true]
; if any? other patches in-cone 3 270 [report true]
 report false
end

;############################################### DETECTION ENNEMI #######################################################################################


to-report detect-enemy
 if any? enemies in-cone convoi-vision-range convoi-vision-angle [report true]
; if any? other patches in-cone 10 90 [report true]
; if any? other patches in-cone 3 270 [report true]
 report false
end

;################################################### CONTOURNEMENT ###################################################################################

to turn-away
   ;let free-patches neighbors with [not any? patches ]
   ;if any? free-patches [face one-of free-patches]
   rt random 10 - 5
end

;################################################## TEST D'ARRIVEE ####################################################################################

to check-convoi-finished
  ; Critere d'arret: on est a cote de l'objectif
  ; Note: on veut etre a cote de l'objectif et pas directement dessus car on est une voiture, donc il se peut qu'on tourne indefiniment autour sans arriver directement a arriver dessus a cause de la limite d'angle de rotation.
  if any? [neighbors6-nowrap with [objectif?]] of patch-here [ ; On ne bouge pas si on est arrive au but!
                                                               ; Fini pour le leader
    set finished? true
    ; Fini aussi pour toutes les voitures-cortege qui suivent ce leader
    let linked-cars (list in-convoi-link-neighbors)
    while [not empty? linked-cars] [ ; on fait une boucle pour recursivement mettre a finished? = true toutes les voitures liees entre elles dans ce cortege
      let next-linked-cars []
      foreach linked-cars [
        ask ? [
          set finished? true
          if any? in-convoi-link-neighbors [ ; on recupere les voitures-cortege liees a la voiture-cortege en cours
            set next-linked-cars lput in-convoi-link-neighbors next-linked-cars
          ]
        ]
      ]
      set linked-cars next-linked-cars
    ]
  ]
end

to-report mean-hp-convoi
  ifelse any? convois
    [ 
      report (mean [hit-points] of convois) 
    ]
    [ report 0 ]
end


to give-missions
  ask drones
  [
    if item 1 mission = "ahead" [ ]
  ]
end



