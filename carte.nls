__includes["convois.nls"]




;environment definition
to setup-env
   ;+++++++dima modif ++++++++++
  ask patches [set obstacle? false set base? false set hangar? false set objectif? false set bridge? false set mountain? false]
;----------------dima modif  --------------------------

  ;ask patches [set obstacle? false set base? false set hangar? false set objectif? false set bridge? false]

  ; Herbe
  ;ask patches with [pzcor = mapAlt][set pcolor green + (random-float 2) - 1]
   ;++++++++++++ modif dima -----------------------
  ;ask patches with [pzcor = mapAlt][set pcolor green + (random-float 2) - 1]
  ask patches with [pzcor = mapAlt][set pcolor green + (random-float 2) - 1 set alt (mapAlt - 1)]
  ;--------------------modif dima--------------


;  ; Montagnes
;if nb-mountains > 0 [
;  repeat nb-mountains [
;
;       
;
;    ]
;  ]

  ; Rivieres
  if nb-rivers > 0 [
    repeat nb-rivers [
      ; A builder will move and create a river at each step
      create-envconstructors 1 [
        ; random deploy on the left side or on the bottom one
        ifelse random-float 1 <= 0.5 [
          set xcor 0
          set ycor random max-pycor
          set heading 90
        ]
        [
          set ycor 0
          set xcor random max-pxcor
          set heading 0
        ]
        set zcor mapAlt

        ; Tag of the first case
        ask patch-here [set pcolor blue set obstacle? true]

        ; move and mark the patch
        repeat max-pxcor + max-pycor [
          ; Change l'orientation aleatoirement
          rt random 30 - 15
          ; one step
          fd 1
          ; randomly select a bridge or a river
          ask patch-here [
            ; bridge
            ifelse random-float 1 <= 0.1 [
              set pcolor brown
              set bridge? true
            ]
            ; River
            [
              set pcolor blue
              set obstacle? true
            ]
          ]
        ]
        die
      ]
    ]
  ]

  ; Lacs
  if nb-lakes > 0 [ ask n-of nb-lakes patches with [pzcor = mapAlt and pxcor > 7 and pycor > 7] [ask patches with [distance-nowrap myself < 4 and pzcor = mapAlt] [set pcolor blue set obstacle? true]] ]

  ; Objectif
  ask one-of patches with[obstacle? = false and base? = false and hangar? = false and pxcor >= (max-pxcor / 2) and pycor >= (max-pycor / 2) and pzcor = mapAlt][set objectif? true ask patch-at 0 0 2 [set pcolor yellow]]

  ; Hangar (la ou les voitures du convois demarrent)
  ask patches with[pzcor = mapAlt and pxcor >= 5 and pxcor < 7 and pycor >= 0 and pycor < 12][set pcolor 8 set hangar? true set obstacle? false]

  ; Base de decollage et atterrissage pour les drones
  ask patches with[pzcor = mapAlt and pxcor >= 3 and pxcor < 5 and pycor >= 0 and pycor < 12][set pcolor 1 set base? true set hangar? false set obstacle? false] ; piste verticale
  ask patches with[pzcor = mapAlt and pycor = 0 and pxcor >= 0 and pxcor < 18][set pcolor 1 set base? true set hangar? false set obstacle? false] ; piste horizontale
  ; Batiment (pour faire joli, ne sert a rien fonctionnellement)
  ask patches with[pzcor <= solAlt and pxcor >= 0 and pxcor < 3 and pycor >= 0 and pycor < 5][set pcolor 3 set obstacle? true set base? false set hangar? false] ; Batiment
  ask patches with [pzcor < 5 and pxcor = 0 and pycor = 0 and pzcor > 0 ] [ set pcolor 3 set obstacle? true set base? false set hangar? false] ; Antenne

  ;++++++++++++++++++dima modif ---------------------

  ; Montagnes
  create_mountain nb-mountains
  ask patches with [alt > 0][set obstacle? true]
  ;-------------------modif dima -----------------------

  ; Copie des obstacles: on s'assure que les patchs au niveau solAlt ont la meme valeur obstacle? que leur patch en-dessous au niveau mapAlt (assure que enemy-random-move fonctionne bien et facilite la detection des obstacles car pas besoin de regarder au niveau mapAlt mais directement dans les patchs solAlt)
  ask patches with [[obstacle?] of patch-at 0 0 -1] [set obstacle? true]
end

;to create_mountain 
;  
;       ask patch random-xcor random-ycor [
;         let alt random max-alt of patch-at 0 0 mapAlt 
;         
;         ]
;       set zcor random alt-max
;end

;++++++++++++++++++++++++++++++++dima modif ++++++++++++++++++++++++++++++++++++++++++++++

to create_mountain [num]
  repeat num [
    ask one-of patches with [alt = mapAlt - 1 and pzcor = mapAlt and not hangar? and not base?] [
      set alt random alt-max 
     ; set plabel alt 
    ]
  ]
  propagate-topology
  ask patches with [pzcor = mapAlt] [
    if alt > 0 [
      let var_alt alt
      while [var_alt > 0 ][ 
      ask patch-at 0 0 var_alt [set pcolor gray + (round (8 * (alt-max - [alt] of myself) / alt-max)) / 2 set mountain? true]
      set var_alt var_alt - 1
      ]     
    ]
  ]
end

to propagate-topology

   set patch-list patch-set patches with [(alt = mapAlt - 1) and any? neighbors with [not (alt <= mapAlt) and pzcor = mapAlt] and not hangar? and not base?]
  while [any? patch-list][
    ask patch-list [
      let altmin alt-max
      ask neighbors [if alt < altmin and pzcor = mapAlt and alt >= mapAlt [set altmin alt]]
      ;set alt min [alt] of (neighbors with [not (alt = mapAlt - 1)  and pzcor = mapAlt])
      
           ifelse random-float 1 < 0.40 [
             set alt altmin
           ]
           [
             ifelse altmin = mapAlt [ set alt mapAlt ]
             [
             set alt altmin - 1 
             ]
            ]
     ; set plabel alt
      ;     set plabel -2
      
    ]
    set patch-list patch-set patches with [(alt = mapAlt - 1) and any? neighbors with [not (alt <= mapAlt) and pzcor = mapAlt] and not hangar? and not base?]
  ]
  
  ;propagate-topology patch-list
end


;-------------------------------dima modif ----------------------------------------